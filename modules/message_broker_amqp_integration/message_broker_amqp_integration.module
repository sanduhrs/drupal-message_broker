<?php

require_once 'consumer_logger.inc';
require_once 'drush_consumer_logger.inc';

/**
 * Implements hook_message_broker_integration_implementation() that informs the
 * message_broker_integration module about this implementation.
 */
function message_broker_amqp_integration_message_broker_integration_implementation() {
    return array('amqp' => array(
            'title' => t('AMQP'),
            'description' => t('An implementation that uses an external AMQP compliant message broker like RabbitMQ to send and consume messages.'),
            'factoryMethod' => '_message_broker_amqp_integration_create_implementation'
        )
    );
}


/**
 * Internal method for registering the PhpAmqpLib namespace.
 */
function _message_broker_amqp_integration_setup_autoload() {
    static $registered = FALSE;
    
    if (!$registered) {
        $registered = TRUE;
        $finder = xautoload_get_finder();
        $libraryPath = libraries_get_path('phpamqp');

        $finder->registerNamespaceRoot('PhpAmqpLib', $libraryPath);
    }
}

function _message_broker_amqp_collect_params() {
    $params = array();
    $params['host'] = variable_get('message_broker_amqp_integration_host', 'localhost');
    $params['port'] = variable_get('message_broker_amqp_integration_port', '5672');
    $params['username'] = variable_get('message_broker_amqp_integration_username', 'guest');
    $params['password'] = variable_get('message_broker_amqp_integration_password', 'guest');
    $params['vhost'] = variable_get('message_broker_amqp_integration_vhost', "/");
    
    $configPath = variable_get('message_broker_amqp_integration_config', '');
    
    if (empty($configPath)) {
        throw new MessageBrokerException('No json configuration path set!');
    }
    
    $configFile = file_get_contents($configPath);
    
    if ($configFile === FALSE) {
        throw new MessageBrokerException('The json configuration file was not read successfully!');
    }
    
    $config = json_decode($configFile, TRUE);
    
    if ($config === NULL) {
        throw new MessageBrokerException('The json configuration was not parsed successfully!');
    }
    
    $params['config'] = $config;
    
    return $params;
}

/**
 * Creates the AMQP implementation.
 * @param array $consumers
 * @param string $selfName
 * @return \AmqpMessageBroker 
 */
function _message_broker_amqp_integration_create_implementation($consumers, $selfName) {
    _message_broker_amqp_integration_setup_autoload();
    $params = _message_broker_amqp_collect_params();
    
    require_once 'amqp_message_broker.inc';
    
    return new AmqpMessageBroker($params, $consumers);
}

/**
 * Implements hook_menu.
 */
function message_broker_amqp_integration_menu() {
    $items = array();

    $items['admin/config/system/message_broker_amqp_integration'] = array(
        'title' => 'AMQP Message Broker Configuration',
        'description' => 'Settings for the AMQP message broker integration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('message_broker_amqp_integration_settings'),
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('administer site configuration')
    );

    return $items;
}

/**
 * Settings form for the amqp configuration.
 * @param array $form
 * @param array $form_state
 * @return array 
 */
function message_broker_amqp_integration_settings($form, &$form_state) {
    $form['intro'] = array('#markup' => '<p>' . t('Enter host and credentials for the AMQP compliant message broker you want to use.') . '</p>');
    
    $form['message_broker_amqp_integration_host'] = array(
        '#type' => 'textfield',
        '#title' => t('Host'),
        '#default_value' => variable_get('message_broker_amqp_integration_host', 'localhost')
    );

    $form['message_broker_amqp_integration_port'] = array(
        '#type' => 'textfield',
        '#title' => t('Port'),
        '#default_value' => variable_get('message_broker_amqp_integration_port', '5672')
    );
    
    $form['message_broker_amqp_integration_vhost'] = array(
        '#type' => 'textfield',
        '#title' => t('Vhost'),
        '#default_value' => variable_get('message_broker_amqp_integration_vhost', "/")
    );

    $form['message_broker_amqp_integration_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#default_value' => variable_get('message_broker_amqp_integration_username', 'guest')
    );
    
    $form['message_broker_amqp_integration_password'] = array(
        '#type' => 'textfield',
        '#title' => t('Password'),
        '#default_value' => variable_get('message_broker_amqp_integration_password', 'guest')
    );
    
    $form['config_intro'] = array('#markup' => '<p>' . t('Specify the path to the message broker configuration file which contains the definitions for all exchanges and queues.') . '</p>');
    
    $form['message_broker_amqp_integration_config'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to json configuration file'),
        '#default_value' => variable_get('message_broker_amqp_integration_config', '')
    );
    
    return system_settings_form($form);
}

/**
 * Validates the configuration form.
 * @param array $form
 * @param array $form_state
 */
function message_broker_amqp_integration_settings_validate($form, &$form_state) {
    if (!empty($form_state['values']['message_broker_amqp_integration_config'])) {
        if (!file_exists($form_state['values']['message_broker_amqp_integration_config'])) {
            form_set_error('message_broker_amqp_integration_config',  'The json file was not found, please check the path.');
            return;
        }

        $configFile = file_get_contents($form_state['values']['message_broker_amqp_integration_config']);
        $config = json_decode($configFile, TRUE);

        if ($config === NULL) {
            form_set_error('message_broker_amqp_integration_config', 'The JSON file was not parsed successfully.');
        }
    }
}