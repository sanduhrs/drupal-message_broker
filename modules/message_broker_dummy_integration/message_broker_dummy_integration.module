<?php

/**
 * Implements hook_message_broker_integration_implementation() that informs the
 * message_broker_integration module about this implementation.
 */
function message_broker_dummy_integration_message_broker_integration_implementation() {
    return array('dummy' => array(
            'title' => t('Dummy'),
            'description' => t('A (partial) dummy implementation of the AMQP protocol that executes everything synchronously within the same request.'),
            'factoryMethod' => '_message_broker_dummy_integration_create_implementation'
        )
    );
}

/**
 * Creates the dummy implementation.
 * @param array $consumers
 * @param string $selfName
 * @return \DummyMessageBroker 
 */
function _message_broker_dummy_integration_create_implementation($consumers, $selfName) {
    require_once 'dummy_message_broker.inc';
    
    $configPath = variable_get('message_broker_dummy_integration_config', '');
    
    if (empty($configPath)) {
        throw new MessageBrokerException('No json configuration path set!');
    }
    
    $configFile = file_get_contents($configPath);
    
    if ($configFile === FALSE) {
        throw new MessageBrokerException('The json configuration file was not read successfully!');
    }
    
    $config = json_decode($configFile, TRUE);
    
    if ($config === NULL) {
        throw new MessageBrokerException('The json configuration was not parsed successfully!');
    }

    return new DummyMessageBroker($config, $consumers);
}


/**
 * Implements hook_menu.
 */
function message_broker_dummy_integration_menu() {
    $items = array();

    $items['admin/config/system/message_broker_dummy_integration'] = array(
        'title' => 'Dummy Message Broker Configuration',
        'description' => 'Settings for the dummy message broker implementation',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('message_broker_dummy_integration_settings'),
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('administer site configuration')
    );

    return $items;
}

/**
 * Settings form for the dummy configuration.
 * @param array $form
 * @param array $form_state
 * @return array 
 */
function message_broker_dummy_integration_settings($form, &$form_state) {
    // todo: validate the file, it should exist and it should be a valid json file
    $form['message_broker_dummy_integration_config'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to json configuration file'),
        '#default_value' => variable_get('message_broker_dummy_integration_config', '')
    );
    
    return system_settings_form($form);
}

/**
 * Validates the settings.
 * @param type $form
 * @param type $form_state
 */
function message_broker_dummy_integration_settings_validate($form, &$form_state) {
    if (!empty($form_state['values']['message_broker_dummy_integration_config'])) {
        if (!file_exists($form_state['values']['message_broker_dummy_integration_config'])) {
            form_set_error('message_broker_dummy_integration_config',  'The json file was not found, please check the path.');
            return;
        }

        $configFile = file_get_contents($form_state['values']['message_broker_dummy_integration_config']);
        $config = json_decode($configFile, TRUE);

        if ($config === NULL) {
            form_set_error('message_broker_dummy_integration_config', 'The JSON file was not parsed successfully.');
        }
    }
}