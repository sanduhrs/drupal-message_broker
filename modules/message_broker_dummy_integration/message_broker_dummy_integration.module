<?php

/**
 * Implements hook_message_broker_integration_implementation().
 */
function message_broker_dummy_integration_message_broker_integration_implementation() {
  return array(
    'dummy' => array(
    'title' => t('Dummy'),
    'description' => t('A (partial) dummy implementation of the AMQP protocol that executes everything synchronously within the same request.'),
    'factoryMethod' => '_message_broker_dummy_integration_create_implementation'
    )
  );
}

/**
 * Creates the dummy implementation.
 *
 * @param array $consumers
 *   Consumers.
 * @param string $self_name
 *   Name of this drupal instance.
 *
 * @return \DummyMessageBroker
 *   Dummy implementation.
 */
function _message_broker_dummy_integration_create_implementation($consumers, 
        $self_name) {
  require_once 'dummy_message_broker.inc';

  $config_path = variable_get('message_broker_dummy_integration_config', '');

  if (empty($config_path)) {
    throw new MessageBrokerException('No json configuration path set!');
  }

  $config_file = file_get_contents($config_path);

  if ($config_file === FALSE) {
    throw new MessageBrokerException('The json configuration file was not read successfully!');
  }

  $config = json_decode($config_file, TRUE);

  if ($config === NULL) {
    throw new MessageBrokerException('The json configuration was not parsed successfully!');
  }

  return new DummyMessageBroker($config, $consumers);
}

/**
 * Implements hook_menu().
 */
function message_broker_dummy_integration_menu() {
  $items = array();

  $items['admin/config/system/message_broker_dummy_integration'] = array(
      'title' => 'Dummy Message Broker Configuration',
      'description' => 'Settings for the dummy message broker implementation',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('message_broker_dummy_integration_settings'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Settings form for the dummy configuration.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 *
 * @return array
 *   Settings form.
 */
function message_broker_dummy_integration_settings($form, &$form_state) {
  $form['intro'] = array(
    '#markup' => '<p>' . t('Specify the path to the ' .
          'message broker configuration file which contains the definitions ' .
          'for all exchanges and queues.') . '</p>');

  $form['message_broker_dummy_integration_config'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to json configuration file'),
    '#default_value' => variable_get('message_broker_dummy_integration_config', ''),
  );

  return system_settings_form($form);
}

/**
 * Validates the settings form.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *  Form state.
 */
function message_broker_dummy_integration_settings_validate($form, &$form_state) {
  if (!empty($form_state['values']['message_broker_dummy_integration_config'])) {
    if (!file_exists($form_state['values']['message_broker_dummy_integration_config'])) {
      form_set_error('message_broker_dummy_integration_config', 'The json file was not found, please check the path.');
      return;
    }

    $config_file = file_get_contents($form_state['values']['message_broker_dummy_integration_config']);
    $config = json_decode($config_file, TRUE);

    if ($config === NULL) {
      form_set_error('message_broker_dummy_integration_config', 'The JSON file was not parsed successfully.');
    }
  }
}
