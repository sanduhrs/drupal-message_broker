<?php

/**
 * @file
 * Implementation of configuration page and hooks.
 */

/**
 * Returns all known message broker integration implementatinons.
 *
 * @return array
 *   Infos about message broker implementations collected via the hook.
 */
function _message_broker_integration_get_implementations() {
  return module_invoke_all('message_broker_integration_implementation');
}

/**
 * Returns all consumers.
 *
 * @return array
 *   All registered consumers.
 */
function _message_broker_integration_get_consumers() {
  return module_invoke_all('message_broker_consumers',
          variable_get('message_broker_integration_self', ''));
}

/**
 * Returns the implementation of the message broker integration.
 *
 * @return IMessageBroker
 *   The message broker implementation.
 * @throws MessageBrokerException
 *   If no implementation is configured
 */
function message_broker_integration_get() {
  static $cached_implementation = NULL;

  if ($cached_implementation == NULL) {
    $implementations = _message_broker_integration_get_implementations();
    $implementation_key = variable_get('message_broker_integration_implementation', '');

    if (empty($implementation_key) || empty($implementations[$implementation_key])) {
      throw new MessageBrokerException('No message broker integration implementation set!');
    }

    $implementation = $implementations[$implementation_key];
    $cached_implementation = call_user_func($implementation['factoryMethod'],
            _message_broker_integration_get_consumers(),
            variable_get('message_broker_integration_self', ''));

    if (!$cached_implementation instanceof IMessageBroker) {
      throw new MessageBrokerException('Creating the message broker integration implementation failed!');
    }
  }

  return $cached_implementation;
}

/**
 * Implements hook_menu().
 *
 * @return array
 *   Registered menu entries.
 */
function message_broker_integration_menu() {
  $items = array();

  $items['admin/config/system/message_broker_integration'] = array(
    'title' => 'Message Broker Integration',
    'description' => 'Configure the message broker integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_broker_integration_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Settings form for the message broker integration.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 *
 * @return array
 *   Settings form.
 */
function message_broker_integration_settings($form, &$form_state) {
  $implementations = _message_broker_integration_get_implementations();
  $options = array();

  foreach ($implementations as $key => $settings) {
    $options[$key] = $settings['title'];

    if (!empty($settings['description'])) {
      $options[$key] .= ' <i> - ' . $settings['description'] . '</i>';
    }
  }

  $form['intro'] = array(
    '#markup' => '<p>' . t('Choose the implementation you
      want to use for sending and receiving messages.<br />Visit the configuration
      page for the chosen implementation to see more options.') . '</p>');

  $form['message_broker_integration_implementation'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#title' => t('Message broker integration implementation'),
    '#default_value' => variable_get('message_broker_integration_implementation', ''),
  );

  $form['message_broker_integration_self'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of this drupal instance'),
    '#description' => t('This value gets passed to the consumers hook,
      enabling modules to consume queues that contain this name.'),
    '#default_value' => variable_get('message_broker_integration_self', ''),
  );

  return system_settings_form($form);
}

/**
 * Gets the self-name of this drupal instance.
 *
 * @return string
 *   Name of this drupal instance.
 */
function message_broker_integration_get_website_name() {
  return variable_get('message_broker_integration_self', '');
}

/**
 * Creates a CriticalErrorException for usage within your consumer.
 *
 * This method creates the desired instance reliable even if the database
 * connection was lost.
 *
 * @param string $message
 *   Exception message.
 * @param string $code
 *   Exception code.
 * @param mixed $previous
 *   Previous exception.
 *
 * @return \CriticalErrorException
 *   Creates exception instance.
 */
function message_broker_integration_throw_critical_error($message = NULL, $code = NULL, $previous = NULL) {
  // We include the file manually to prevent drupal autoloading, which
  // relies on DB calls.
  require_once 'message_broker_exception.inc';

  return new CriticalErrorException($message, $code, $previous);
}
